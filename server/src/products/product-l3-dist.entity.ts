import "reflect-metadata";
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from "typeorm";
import { Product } from './product.entity';
import { Survey } from "src/surveys/survey.entity";
import { ProductL3Src } from "./product-l3-src.entity";
import { ApiHideProperty } from "@nestjs/swagger";
import { Exclude } from "class-transformer";

@Entity()
export class ProductL3Dist implements Product {

  /**
   * The autogenerated id for the product
   *
   * @type {number}
   * @memberof Product
   */
  @PrimaryGeneratedColumn()
  id: number;

  /**
  * Reference to the source data for this distribution
  *
  * @type {Survey}
  * @memberof Product
  */
  @ManyToOne(type => ProductL3Src, {
    nullable: false,
    onDelete: 'CASCADE',
    eager: true
  })
  sourceProduct: ProductL3Src;

  /**
   * Unique identifier for reference purposes
   *
   * @type {string}
   * @memberof Product
   */
  get uuid (): string {
    return this.sourceProduct.uuid;
  }

  /**
   * Name of product for display purposes - from gazeteer
   *
   * @type {string}
   * @memberof Product
   */
  get name (): string {
    return this.sourceProduct.name;
  }

  /**
   * Spatial Reference of product
   *
   * @type {string}
   * @memberof Product
   */
  get srs (): string {
    return this.sourceProduct.srs;
  }

  /**
   * Persistent Id of metadata product
   *
   * @type {string}
   * @memberof Product
   */
  get metadataPersistentId (): string {
    return this.sourceProduct.metadataPersistentId;
  }

  /**
   * Location of the L3 polygon shapefile
   *
   * @type {string}
   * @memberof ProductL3Dist
   */
  @Column()
  l3CoverageLocation: string; // Location of shapefile 

  /**
   * Location of the raster bathymetry
   *
   * @type {string}
   * @memberof ProductL3Dist
   */
  @Column()
  bathymetryLocation: string;

  /**
   * Location of the hillshade associated with the raster
   *
   * @type {string}
   * @memberof ProductL3Dist
   */
  @Column()
  hillshadeLocation: string; // S3 location

  @ApiHideProperty()
  @Exclude()
  @Column("tstzrange", {
    default: () =>
      "tstzrange(CURRENT_TIMESTAMP, NULL::timestamp with time zone)",
  })
  sysPeriod: any;
}
