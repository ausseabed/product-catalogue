import 'reflect-metadata';
import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';
import { Product, VerticalDatum } from './product.entity';
import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';
import { Exclude } from 'class-transformer';
import 'crypto';
import { Style } from './style.entity';


@Entity()
export class ProductL3Src implements Product {

  /**
   * The autogenerated id for the product
   *
   * @type {number}
   * @memberof Product
   */
  @ApiProperty({type:'integer'})
  @PrimaryGeneratedColumn()
  id: number;

  /**
   * Unique identifier for reference purposes
   *
   * @type {string}
   * @memberof Product
   */
  @Column()
  uuid: string;

  /**
   * Name of product for display purposes - from gazeteer
   *
   * @type {string}
   * @memberof Product
   */
  @Column()
  name: string;

  /**
   * Spatial Reference of product
   *
   * @type {string}
   * @memberof Product
   */
  @Column()
  srs: string;

  /**
   * Vertical Reference of product
   *
   * @type {string}
   * @memberof Product
   */
  @Column({type: "enum",
        enum: VerticalDatum,
        default: VerticalDatum.Unknown})
  verticalDatum: VerticalDatum;

  /**
   * Persistent Id of the metadata product
   *
   * @type {string}
   * @memberof Product
   */
  @Column()
  metadataPersistentId: string;

  /**
   * Resolution of product for display purposes
   *
   * @type {string}
   * @memberof ProductL3Src
   */
  @Column()
  resolution: string;

  /**
   * Location of final product
   *
   * @type {string}
   * @memberof ProductL3Src
   */
  @Column()
  productTifLocation: string;

  /**
   * Location of final bag product
   *
   * @type {string}
   * @memberof ProductL3Src
   */
  @Column()
  productBagLocation: string;

  @ManyToOne(() => Style, {
    eager: true
  })
  @JoinColumn()
  @ApiProperty({ required: false, type: Style })
  defaultStyle: Style;

  @ManyToMany(() => Style, {
    eager: true
  })
  @JoinTable()
  @ApiProperty({ required: false, type: [Style] })
  availableStyles: Style[];

  @ApiHideProperty()
  @Exclude()
  @Column("tstzrange", {
    default: () =>
      "tstzrange(CURRENT_TIMESTAMP, NULL::timestamp with time zone)",
  })
  sysPeriod: any;
}
