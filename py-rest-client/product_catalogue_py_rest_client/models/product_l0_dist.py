# coding: utf-8

"""
    AusSeabed product catalogue

    The API description for the Ausseabed product catalogue inventory  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Contact: AusSeabed@ga.gov.au
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from product_catalogue_py_rest_client.configuration import Configuration


class ProductL0Dist(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'l0_coverage_location': 'str',
        'l0_instrument_files': 'list[ProductL0InstrumentFile]',
        'source_product': 'ProductL0Src'
    }

    attribute_map = {
        'id': 'id',
        'l0_coverage_location': 'l0CoverageLocation',
        'l0_instrument_files': 'l0InstrumentFiles',
        'source_product': 'sourceProduct'
    }

    def __init__(self, id=None, l0_coverage_location=None, l0_instrument_files=None, source_product=None, local_vars_configuration=None):  # noqa: E501
        """ProductL0Dist - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._l0_coverage_location = None
        self._l0_instrument_files = None
        self._source_product = None
        self.discriminator = None

        self.id = id
        self.l0_coverage_location = l0_coverage_location
        self.l0_instrument_files = l0_instrument_files
        self.source_product = source_product

    @property
    def id(self):
        """Gets the id of this ProductL0Dist.  # noqa: E501


        :return: The id of this ProductL0Dist.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductL0Dist.


        :param id: The id of this ProductL0Dist.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def l0_coverage_location(self):
        """Gets the l0_coverage_location of this ProductL0Dist.  # noqa: E501


        :return: The l0_coverage_location of this ProductL0Dist.  # noqa: E501
        :rtype: str
        """
        return self._l0_coverage_location

    @l0_coverage_location.setter
    def l0_coverage_location(self, l0_coverage_location):
        """Sets the l0_coverage_location of this ProductL0Dist.


        :param l0_coverage_location: The l0_coverage_location of this ProductL0Dist.  # noqa: E501
        :type l0_coverage_location: str
        """
        if self.local_vars_configuration.client_side_validation and l0_coverage_location is None:  # noqa: E501
            raise ValueError("Invalid value for `l0_coverage_location`, must not be `None`")  # noqa: E501

        self._l0_coverage_location = l0_coverage_location

    @property
    def l0_instrument_files(self):
        """Gets the l0_instrument_files of this ProductL0Dist.  # noqa: E501


        :return: The l0_instrument_files of this ProductL0Dist.  # noqa: E501
        :rtype: list[ProductL0InstrumentFile]
        """
        return self._l0_instrument_files

    @l0_instrument_files.setter
    def l0_instrument_files(self, l0_instrument_files):
        """Sets the l0_instrument_files of this ProductL0Dist.


        :param l0_instrument_files: The l0_instrument_files of this ProductL0Dist.  # noqa: E501
        :type l0_instrument_files: list[ProductL0InstrumentFile]
        """
        if self.local_vars_configuration.client_side_validation and l0_instrument_files is None:  # noqa: E501
            raise ValueError("Invalid value for `l0_instrument_files`, must not be `None`")  # noqa: E501

        self._l0_instrument_files = l0_instrument_files

    @property
    def source_product(self):
        """Gets the source_product of this ProductL0Dist.  # noqa: E501


        :return: The source_product of this ProductL0Dist.  # noqa: E501
        :rtype: ProductL0Src
        """
        return self._source_product

    @source_product.setter
    def source_product(self, source_product):
        """Sets the source_product of this ProductL0Dist.


        :param source_product: The source_product of this ProductL0Dist.  # noqa: E501
        :type source_product: ProductL0Src
        """
        if self.local_vars_configuration.client_side_validation and source_product is None:  # noqa: E501
            raise ValueError("Invalid value for `source_product`, must not be `None`")  # noqa: E501

        self._source_product = source_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductL0Dist):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductL0Dist):
            return True

        return self.to_dict() != other.to_dict()
