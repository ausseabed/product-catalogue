version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-cli: circleci/aws-cli@2.0.2

commands:
  ecr-get-tag:
    description: "Get the tag that is going to be used"
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        description: |
          Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      docker_tag:
        default: DOCKER_TAG
        description: Env var storing docker image tag (default = DOCKER_TAG)
        type: env_var_name
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - run: cat /tmp/cci-extras/workspace/docker_tag_vars >> $BASH_ENV
      - run:
          name: "Show Docker tag"
          command: |
            echo "DOCKER TAG: $DOCKER_TAG"

  ecr-tag-and-push:
    description: "Tag and Push Docker Image because CircleCI is incapable of sanity"
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        description: |
          Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      docker_tag:
        default: DOCKER_TAG
        description: Env var storing docker image tag (default = DOCKER_TAG)
        type: env_var_name
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - run: cat /tmp/cci-extras/workspace/docker_tag_vars >> $BASH_ENV
      - run:
          name: "Show Docker tag"
          command: |
            echo "DOCKER TAG: $DOCKER_TAG"
      - run:
          name: "Docker Tag and Push"
          command: |
            docker tag $<<parameters.account-url>>/<<parameters.repo>>:circleci-build \
              $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>
            docker push $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>

  prepare-terraform:
    description: "Installs Terraform and dependencies"
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: check s3
          command: aws sts get-caller-identity
      - run:
          name: keep SSH happy
          command: |
            mkdir -m 0700 ~/.ssh
            ssh-keyscan -p 22 github.com >> ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
      - run:
          name: Install terraform
          command: wget https://releases.hashicorp.com/terraform/0.12.29/terraform_0.12.29_linux_amd64.zip && unzip terraform_0.12.29_linux_amd64.zip && chmod +x terraform && sudo mv terraform /usr/bin/
      - run:
          name: Install terragrunt
          command: wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.23.27/terragrunt_linux_amd64 && chmod +x terragrunt_linux_amd64 && sudo mv terragrunt_linux_amd64 /usr/bin/terragrunt

  validate_master_branch:
    description: "Verifies that tag commit is present on master branch"
    steps:
      - run:
          name: "Verify Master branch"
          command: |
            echo $CIRCLE_TAG
            git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)'
            IS_ON_MASTER="$(git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)' |grep ^origin/master$)"
            echo "IS_ON_MASTER: \"$IS_ON_MASTER\""
            if [[ -n "$IS_ON_MASTER" ]]
            then
              echo "ON MASTER BRANCH: \"$IS_ON_MASTER\""
            else
              echo "NOT ON MASTER BRANCH, FAILING BUILD"
              exit 100
            fi

jobs:
  dev_docker_tag:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run: mkdir -p workspace
      - run:
          name: "Prepare DEV docker tag"
          command: |
            echo "export DOCKER_TAG=latest" >> workspace/docker_tag_vars
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_tag_vars

  prepare_docker_tag:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - run: mkdir -p workspace
      - validate_master_branch
      - run:
          name: "Extract Docker tag from Git tag"
          command: |
            DOCKER_TAG=`echo $CIRCLE_TAG | awk -F'/' '{print $3}'`
            if [[ ! $DOCKER_TAG =~ ^[0-9][0-9\.]*$ ]]
            then
              echo "Incorrect format for Docker Tag: \"$DOCKER_TAG\", are we on \"prod/publish/X.Y.Z\" tag?"
              exit 101
            fi
            echo "Extracted new Docker Tag: \"$DOCKER_TAG\""
            echo "export DOCKER_TAG=$DOCKER_TAG" >> workspace/docker_tag_vars
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_tag_vars

  build_product_catalogue_server:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - aws-cli/setup:
          override-installed: true
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          dockerfile: ./server/Dockerfile
          path: ./
          repo: ausseabed-product-catalogue-server
          tag: circleci-build,latest
      - ecr-tag-and-push:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-product-catalogue-server
          docker_tag: DOCKER_TAG

  build_product_catalogue_client:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - run:
          name: Create the npmrc file
          working_directory: ./client
          command: echo "//npm.pkg.github.com/:_authToken=$READONLY_PACKAGE_TOKEN" > .npmrc && echo "@ausseabed:registry=https://npm.pkg.github.com" >> .npmrc
      - run:
          name: Build the rest-client
          working_directory: ./rest-client
          command: npm install && npm run build
      - run:
          name: Setup Environment Variables
          command: |
            echo "export AUTH_HOST=$AUTH_HOST" >> $BASH_ENV
            echo "export AUTH_CLIENT_ID=$AUTH_CLIENT_ID" >> $BASH_ENV
      - ecr-get-tag:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-product-catalogue-client
          docker_tag: DOCKER_TAG
      - aws-cli/setup:
          override-installed: true
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          dockerfile: ./Dockerfile
          path: ./client
          repo: ausseabed-product-catalogue-client
          extra-build-args: "--build-arg AUTH_HOST=$AUTH_HOST --build-arg AUTH_CLIENT_ID=$AUTH_CLIENT_ID --build-arg APC_VERSION=$DOCKER_TAG"
          tag: circleci-build,latest
      - ecr-tag-and-push:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-product-catalogue-client
          docker_tag: DOCKER_TAG

  validate_prod_deployment:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - validate_master_branch

  prepare_deploy_product_catalogue_infra:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run: mkdir -p workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terraform plan
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: terragrunt plan -out=infra-terraform.plan -input=false
      - run: mv ./ausseabed-aws-foundation/pcat-infra/infra-terraform.plan workspace
      - persist_to_workspace:
          root: workspace
          paths:
            - infra-terraform.plan

  do_deploy_product_catalogue_infra:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terragrunt apply
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: |
            terragrunt apply -input=false --auto-approve /tmp/cci-extras/workspace/infra-terraform.plan
      - run:
          name: Print Current Versions
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: grep "ausseabed-product-catalogue-[a-z]*:" terragrunt.hcl

  prepare_deploy_product_catalogue_app:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run: mkdir -p workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terraform plan
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: terragrunt plan -out=app-terraform.plan -input=false
      - run: mv ./ausseabed-aws-foundation/pcat-app-deployment/app-terraform.plan workspace
      - persist_to_workspace:
          root: workspace
          paths:
            - app-terraform.plan

  do_deploy_product_catalogue_app:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terragrunt apply
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: |
            terragrunt apply -input=false --auto-approve /tmp/cci-extras/workspace/app-terraform.plan
      - run:
          name: Print Current Versions
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: grep "ausseabed-product-catalogue-[a-z]*:" terragrunt.hcl
      - run:
          name: Print Commands for Next Production Tag
          working_directory: ./ausseabed-aws-foundation/pcat-app-deployment
          command: ./update_message.sh

### Pre-defined filters for workflows

prod_publish_tag_only: &prod_publish_tag_only
  filters:
    tags:
      only: /^prod/publish/\d[\d\.]*f?$/
    branches:
      ignore: /.*/

prod_deploy_tag_only: &prod_deploy_tag_only
  filters:
    tags:
      only: /^prod/deploy/\d[\d\.]*f?$/
    branches:
      ignore: /.*/

master_branch_only: &master_branch_only
  filters:
    branches:
      only:
        - master

### Workflows section
workflows:
  build_and_deploy_dev_images:
    jobs:
      - dev_docker_tag:
          <<: *master_branch_only
      - build_product_catalogue_server:
          <<: *master_branch_only
          requires:
            - dev_docker_tag
      - build_product_catalogue_client:
          <<: *master_branch_only
          requires:
            - dev_docker_tag
      - prepare_deploy_product_catalogue_infra:
          <<: *master_branch_only
          requires:
            - build_product_catalogue_server
            - build_product_catalogue_client
      - do_deploy_product_catalogue_infra:
          <<: *master_branch_only
          requires:
            - prepare_deploy_product_catalogue_infra
      - prepare_deploy_product_catalogue_app:
          <<: *master_branch_only
          requires:
            - build_product_catalogue_server
            - build_product_catalogue_client
            - do_deploy_product_catalogue_infra
      - do_deploy_product_catalogue_app:
          <<: *master_branch_only
          requires:
            - prepare_deploy_product_catalogue_app

  publish_production_images:
    jobs:
      - prepare_docker_tag:
          <<: *prod_publish_tag_only
      - build_product_catalogue_server:
          <<: *prod_publish_tag_only
          context: ga_sb_docker_prod_publish
          requires:
            - prepare_docker_tag
      - build_product_catalogue_client:
          <<: *prod_publish_tag_only
          context: ga_sb_docker_prod_publish
          requires:
            - prepare_docker_tag

  deploy_to_production:
    jobs:
      - validate_prod_deployment:
          <<: *prod_deploy_tag_only
      - prepare_deploy_product_catalogue_infra:
          <<: *prod_deploy_tag_only
          requires:
            - validate_prod_deployment
          context: ga_sb_ecs_prod_deployment
      - approve_deploy_product_catalogue_infra:
          <<: *prod_deploy_tag_only
          type: approval
          requires:
            - prepare_deploy_product_catalogue_infra
      - do_deploy_product_catalogue_infra:
          <<: *prod_deploy_tag_only
          requires:
            - approve_deploy_product_catalogue_infra
          context: ga_sb_ecs_prod_deployment
      - prepare_deploy_product_catalogue_app:
          <<: *prod_deploy_tag_only
          requires:
            - validate_prod_deployment
            - do_deploy_product_catalogue_infra
          context: ga_sb_ecs_prod_deployment
      - approve_deploy_product_catalogue_app:
          <<: *prod_deploy_tag_only
          type: approval
          requires:
            - prepare_deploy_product_catalogue_app
      - do_deploy_product_catalogue_app:
          <<: *prod_deploy_tag_only
          requires:
            - approve_deploy_product_catalogue_app
          context: ga_sb_ecs_prod_deployment
