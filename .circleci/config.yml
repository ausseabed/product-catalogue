version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.9.1
  aws-cli: circleci/aws-cli@0.1.13

commands:
  ecr-tag-and-push:
    description: "Tag and Push Docker Image because CircleCI is incapable of sanity"
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        description: |
          Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      docker_tag:
        default: DOCKER_TAG
        description: Env var storing docker image tag (default = DOCKER_TAG)
        type: env_var_name
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - run: cat /tmp/cci-extras/workspace/docker_tag_vars >> $BASH_ENV
      - run:
          name: "Show Docker tag"
          command: |
            echo "DOCKER TAG: $DOCKER_TAG"
      - run:
          name: "Docker Tag and Push"
          command: |
            docker tag $<<parameters.account-url>>/<<parameters.repo>>:circleci-build \
              $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>
            docker push $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>


jobs:
  prepare_docker_tag:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: mkdir -p workspace
      - run:
          name: "Verify Tagged Build"
          command: |
            set -x
            echo $CIRCLE_TAG
            git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)'
            IS_ON_MASTER="$(git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)' |grep ^origin/feature)"
            echo "IS_ON_MASTER: \"$IS_ON_MASTER\""
            if [[ -n "$IS_ON_MASTER" ]]
            then
              echo "ON MASTER BRANCH: \"$IS_ON_MASTER\""
            else
              echo "NOT ON MASTER BRANCH, FAILING BUILD"
              exit 100
            fi
            DOCKER_TAG=`echo $CIRCLE_TAG | awk -F'/' '{print $2}'`
            if [[ ! $DOCKER_TAG =~ ^[0-9][0-9\.]*$ ]]
            then
              echo "Incorrect format for Docker Tag: \"$DOCKER_TAG\", are we on \"prod/X.Y.Z\" tag?"
              exit 101
            fi
            echo "Extracted new Docker Tag: \"$DOCKER_TAG\""
            echo "export DOCKER_TAG=$DOCKER_TAG" >> workspace/docker_tag_vars
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_tag_vars

  build_product_catalogue_server:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure:
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          dockerfile: ./Dockerfile
          path: ./server
          repo: ausseabed-product-catalogue-server
          tag: circleci-build,latest
      - ecr-tag-and-push:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-product-catalogue-server
          docker_tag: DOCKER_TAG



  build_product_catalogue_client:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Build the rest-client
          working_directory: ./rest-client
          command: npm install && npm run build
      - run:
          name: Setup Environment Variables
          command: |
            echo "export AUTH_HOST=$AUTH_HOST" >> $BASH_ENV
            echo "export AUTH_CLIENT_ID=$AUTH_CLIENT_ID" >> $BASH_ENV
      - aws-cli/install
      - aws-cli/configure:
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          dockerfile: ./Dockerfile
          path: ./client
          repo: ausseabed-product-catalogue-client
          extra-build-args: "--build-arg AUTH_HOST=$AUTH_HOST --build-arg AUTH_CLIENT_ID=$AUTH_CLIENT_ID"
          tag: circleci-build,latest
      - ecr-tag-and-push:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-product-catalogue-client
          docker_tag: DOCKER_TAG

  prepare_deploy_product_catalogue:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: check s3
          command: aws sts get-caller-identity
      - run:
          name: keep SSH happy
          command: |
            mkdir -m 0700 ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: Install terraform
          command: wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip && unzip terraform_0.12.24_linux_amd64.zip && chmod +x terraform && sudo mv terraform /usr/bin/
      - run:
          name: terraform init
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terraform init
      - run:
          name: terraform plan
          working_directory: ./ausseabed-aws-foundation/pcat-infra
          command: terraform plan
#      - run:
#          name: terraform apply
#          working_directory: ./infra
#          command: terraform apply --auto-approve

workflows:
  update_infra_and_application:
    jobs:
      - build_product_catalogue_server:
          filters:
            branches:
              only:
                - master
      - build_product_catalogue_client:
          filters:
            branches:
              only:
                - master
      - prepare_deploy_product_catalogue:
          filters:
            branches:
              only:
                - master
          requires:
            - build_product_catalogue_server
            - build_product_catalogue_client
  publish_production_images:
    jobs:
#      - prepare_docker_tag:
#          filters:
#            tags:
#              only: /^stage/\d[\d\.]*f?$/
#            branches:
#              only: /^this-should-never-exist$/
#      - build_product_catalogue_server:
#          filters:
#            tags:
#              only: /^stage/\d[\d\.]*f?$/
#            branches:
#              only: /^this-should-never-exist$/
#          requires:
#            - prepare_docker_tag
#      - build_product_catalogue_client:
#          filters:
#            tags:
#              only: /^stage/\d[\d\.]*f?$/
#            branches:
#              only: /^this-should-never-exist$/
#          requires:
#            - prepare_docker_tag
      - prepare_deploy_product_catalogue:
          filters:
            tags:
              only: /^stage/\d[\d\.]*f?$/
            branches:
              only: /^this-should-never-exist$/
#          requires:
#            - build_product_catalogue_server
#            - build_product_catalogue_client
